version: '3'

services:
  traefik:
    image: traefik:v2.10
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/etc/traefik/traefik.toml
    # restart: on-failure
    depends_on:
      - mongo
      - deck
      - repository
      - client

  mongo:
    image: mongo
    # restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  repository:
    build:
      context: ./repository
      dockerfile: Dockerfile.dev
    volumes:
      - ./repository/src:/app/src
    labels:
      - traefik.enable=true
      - traefik.http.routers.repository.rule=PathPrefix(`/api/repository`)
      - traefik.http.routers.repository.entrypoints=web
    # restart: on-failure
    depends_on:
      - mongo

  deck:
    build:
      context: ./deck
      dockerfile: Dockerfile.dev
    volumes:
      - ./deck/src:/app/src
    labels:
      - traefik.enable=true
      - traefik.http.routers.deck.rule=PathPrefix(`/api/deck`)
      - traefik.http.routers.deck.entrypoints=web
    # restart: on-failure
    depends_on:
      - mongo

  client:
    build:
      context: ./neo_client
      dockerfile: Dockerfile.dev
    volumes:
      - ./neo_client:/app
    labels:
      - traefik.enable=true
      - traefik.http.routers.client.rule=Host(`localhost`)
      - traefik.http.routers.client.entrypoints=web
    # restart: on-failure
    depends_on:
      - repository
      - deck

  messaging:
    container_name: messaging
    build: ./messaging
    labels:
      - traefik.enable=true
      - traefik.http.routers.messaging.rule=PathPrefix(`/api/messaging`)
      - traefik.http.routers.messaging.entrypoints=web
    volumes:
      - ./messaging:/app
